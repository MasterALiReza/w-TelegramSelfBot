# قوانین توسعه پروژه Windsurf - سلف بات تلگرام

## اصول معماری نرم‌افزار

1. **معماری ماژولار**: کد پروژه باید به ماژول‌های مستقل با مسئولیت‌های مشخص تقسیم شود. هر ماژول باید یک وظیفه خاص را انجام دهد و وابستگی‌های حداقلی به سایر ماژول‌ها داشته باشد.

2. **اصل تک مسئولیتی**: هر کلاس، ماژول و تابع باید تنها یک دلیل برای تغییر داشته باشد.

3. **استفاده از الگوهای طراحی**: برای حل مشکلات تکراری، از الگوهای طراحی استاندارد استفاده شود. به ویژه:
   - الگوی Singleton برای مدیریت منابع مشترک
   - الگوی Factory برای ایجاد نمونه‌های مختلف کلاینت تلگرام
   - الگوی Observer برای سیستم رویداد و پاسخگویی

4. **طراحی لایه‌ای**: کد باید در لایه‌های مشخص سازماندهی شود:
   - لایه دسترسی به API تلگرام
   - لایه منطق کسب و کار
   - لایه ذخیره‌سازی داده
   - لایه رابط کاربری (وب و تلگرام)

## استانداردهای کدنویسی

1. **نامگذاری معنادار**: تمام متغیرها، توابع، کلاس‌ها و ماژول‌ها باید نام‌های واضح و توصیفی داشته باشند.
   - برای نام توابع از افعال (مانند `get_user`, `send_message`) استفاده شود
   - برای نام کلاس‌ها از اسامی (مانند `MessageHandler`, `DatabaseManager`) استفاده شود

2. **ثبات در سبک کد**: کل پروژه باید از سبک کدنویسی PEP 8 پیروی کند.
   - استفاده از snake_case برای نام متغیرها و توابع
   - استفاده از CamelCase برای نام کلاس‌ها
   - حداکثر 79 کاراکتر در هر خط

3. **مستندسازی جامع**: تمام کلاس‌ها، توابع و ماژول‌ها باید با استاندارد docstring مستند شوند:
   - توضیح کوتاه درباره عملکرد
   - پارامترهای ورودی و نوع آنها
   - مقدار بازگشتی و نوع آن
   - استثناهای احتمالی

4. **مدیریت استثناء**: استثناها باید به درستی مدیریت شوند و هرگز بدون رسیدگی از برنامه خارج نشوند.
   - ایجاد کلاس‌های استثناء سفارشی برای خطاهای مرتبط با API تلگرام
   - ثبت تمام استثناها در سیستم لاگ

5. **کد تمیز**: توابع نباید بیش از 50 خط داشته باشند و باید فقط یک کار مشخص را انجام دهند.

## تست و کیفیت کد

1. **پوشش تست**: حداقل 80% کد باید تحت پوشش تست‌های خودکار قرار گیرد:
   - تست‌های واحد برای کلاس‌ها و توابع مجزا
   - تست‌های یکپارچگی برای تعامل بین ماژول‌ها
   - تست‌های عملکردی برای بررسی قابلیت‌های اصلی

2. **CI/CD**: پروژه باید سیستم CI/CD داشته باشد:
   - اجرای خودکار تست‌ها با هر push به مخزن
   - بررسی کیفیت کد با ابزارهایی مانند Pylint و Flake8
   - ساخت و توزیع خودکار با هر تغییر در شاخه اصلی

3. **آزمون نفوذ**: آزمون نفوذ امنیتی باید به صورت منظم برای سیستم انجام شود.

## مدیریت پایگاه داده

1. **طراحی دقیق Schema**: ساختار داده باید با استفاده از Entity-Relationship مدل‌سازی شود.

2. **مهاجرت داده**: از سیستم مهاجرت داده (Alembic) برای مدیریت تغییرات ساختار پایگاه داده استفاده شود.

3. **بهینه‌سازی**: تمام queries باید بهینه‌سازی شده باشند و از ایندکس‌ها به درستی استفاده شود.

4. **ORM**: برای تعامل با پایگاه داده از SQLAlchemy استفاده شود تا سازگاری بین سیستم شیءگرا و پایگاه داده رابطه‌ای حفظ شود.

## امنیت

1. **حفاظت از داده‌های حساس**: تمام داده‌های حساس باید رمزنگاری شوند:
   - رمزنگاری اطلاعات احراز هویت (API ID و API Hash)
   - رمزنگاری session file های تلگرام
   - استفاده از کلیدهای رمزنگاری ایمن و مدیریت کلید مناسب

2. **اعتبارسنجی ورودی**: تمام ورودی‌های کاربر باید اعتبارسنجی شوند تا از حملات تزریق جلوگیری شود.

3. **مدیریت دسترسی**: سیستم کنترل دسترسی دقیق برای محدود کردن اقدامات مجاز هر کاربر پیاده‌سازی شود.

4. **هندلینگ استثناهای امنیتی**: استثناهای مرتبط با امنیت باید به طور ویژه مدیریت شوند، بدون افشای اطلاعات حساس در پیام‌های خطا.

## سیستم پلاگین

1. **معماری پلاگین**: ساختار پلاگین باید استاندارد و مبتنی بر رابط برنامه‌نویسی (Interface) باشد.

2. **ایزوله‌سازی پلاگین‌ها**: هر پلاگین باید در فضای نام مخصوص به خود اجرا شود تا از تداخل با دیگر بخش‌های سیستم جلوگیری شود.

3. **مدیریت وابستگی‌ها**: هر پلاگین باید وابستگی‌های خود را به صورت صریح اعلام کند و سیستم باید قابلیت نصب خودکار این وابستگی‌ها را داشته باشد.

4. **اعتبارسنجی پلاگین**: قبل از بارگذاری، هر پلاگین باید از نظر سازگاری و امنیت بررسی شود.

## مستندسازی پروژه

1. **مستندات API**: API های داخلی و خارجی باید به طور کامل مستند شوند:
   - مستندسازی API با Swagger یا OpenAPI
   - مثال‌های کاربردی برای هر API

2. **راهنمای توسعه‌دهنده**: راهنمای کاملی برای توسعه‌دهندگان جدید ایجاد شود:
   - توضیح ساختار پروژه
   - الزامات نصب و راه‌اندازی
   - چگونگی ایجاد محیط توسعه

3. **راهنمای کاربر**: مستندات کاربری به زبان ساده و با تصاویر توضیحی تهیه شود.

## مدیریت پروژه

1. **Git Flow**: روش Git Flow برای مدیریت شاخه‌ها استفاده شود:
   - شاخه `main` برای نسخه‌های پایدار
   - شاخه `develop` برای توسعه جاری
   - شاخه‌های `feature/` برای ویژگی‌های جدید
   - شاخه‌های `bugfix/` برای رفع اشکالات
   - شاخه‌های `release/` برای آماده‌سازی انتشار

2. **Semantic Versioning**: برای نسخه‌گذاری از استاندارد Semantic Versioning استفاده شود (MAJOR.MINOR.PATCH).

3. **Pull Request**: تمام تغییرات باید از طریق Pull Request انجام شوند و حداقل توسط یک نفر بررسی شوند.

4. **چک‌لیست مرور کد**:
   - آیا کد با استانداردهای کدنویسی مطابقت دارد؟
   - آیا کد شامل تست‌های مناسب است؟
   - آیا مستندات به روز شده‌اند؟
   - آیا نکات امنیتی رعایت شده‌اند؟

## چارچوب اجرا

1. **مجازی‌سازی**: پروژه باید در داکر اجرا شود تا سازگاری بین محیط‌های مختلف تضمین گردد.
   - هر سرویس در یک کانتینر جداگانه
   - استفاده از docker-compose برای هماهنگی سرویس‌ها

2. **مدیریت وابستگی**: تمام وابستگی‌ها باید در `requirements.txt` یا استفاده از poetry مشخص شوند.

3. **پیکربندی**: تنظیمات باید در فایل‌های جداگانه ذخیره شوند:
   - فایل `.env` برای متغیرهای محیطی محلی
   - فایل‌های پیکربندی YAML برای تنظیمات عمومی
   - استفاده از سیستم پیکربندی سلسله مراتبی

4. **مدیریت لاگ**: سیستم لاگینگ استاندارد با قابلیت چرخش خودکار فایل‌های لاگ پیاده‌سازی شود.

## چابکی و بهبود مستمر

1. **بازنگری کد منظم**: هر دو هفته، جلسه بازنگری کد برگزار شود تا بدهی فنی شناسایی و برطرف شود.

2. **به‌روزرسانی وابستگی‌ها**: وابستگی‌های خارجی باید به طور منظم به‌روزرسانی شوند تا از مشکلات امنیتی جلوگیری شود.

3. **استفاده از نتایج پروفایلینگ**: عملکرد برنامه باید به طور منظم پروفایل شود و گلوگاه‌های عملکردی شناسایی و برطرف شوند.

این قوانین باید راهنمای توسعه‌دهندگان برای ساخت یک سلف بات تلگرام پایدار، امن و قابل توسعه باشد. هر تغییر در این قوانین باید با توافق تیم توسعه و مستندسازی مناسب انجام شود.